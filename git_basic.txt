inicializando git em um projeto
    - no terminal : git init

assim que criamos um repositório git, devemos fazer a configuração via terminal :
    - git config user.name - nome de quem está trabalhando
    - git config user.email
    - podemos fazer uma configuração a nível global, que é seguida em todos os repositórios criados
        - git config --global user.name
        - git config --global user.email

comando git status:
    - checa o status de monitoramento/gerenciamento do git no projeto corrente
    - sempre que o comando git status retornar :
        On branch master
        nothing to commit, working tree clean
    - significa que está tudo ok!

quando queremos ignorar arquivos ou diretórios ( quando não é para o git fazer seu monitoramento ):
    - .gitignore
    - criamos o arquivo .gitignore e dentro dele listamos os arquivos e diretórios 
    - ignorar arquivo
        - inserimos o nome do arquivo a ser ignorado
        - inserimos a extensão dos arquivos a serem ignorados *.extension ( *.sqlite3, por exemplo )
    - ignorar diretório
        - inserimos o nome do diretório precedido de **
        - válido somente para diretórios com conteúdo

para adicionarmos arquivos ao projeto, fazendo com que o git os monitore :
    - git add <filme_name>
    - este comando serve também quando fazemos alguma alteração em arquivo existente
    - git add . - podemos com este commando atualizar/adicionar todos os arquivos necessários

commit - é o envio ou submissão dos arquivos monitorados para o estágio "staged" (arquivo pronto)
    - git commit -m "<mensagem qualquer - referente ao commit>"
    - essa mensagem é vista nos logs
    - ao fazermos um commit, nós temos um snap shot do projeto daquele momento
    - hash id - identificador gerado a cada commit

comando git log
    - nos fornece uma lista com os commits feitos, identificados pelo hash id, autor, email,
    data, hora e mensagem passada como argumento no -m <message>
    - no topo da lista fica o estado atual do projeto
    - quando temos um log muito grande, podemos usar /<palavra> para fazer uma busca pela palavra
        - o número de commits exibida depende do tamanho da janela do terminal
        - a lista de log fica travada e basta digitarmos Q para sair 
        - podemos mudar este comportamento, fazendo com que todos os commits sejam exibidos 
            - git config core.pager cat (podemos fazer essa config de forma global com --global)
    - podemos exibir uma quantidade de commits desejada :
        - git log -N vai mostrar os N últimos commits
    - podemos trazer a informação resumida com um commit por linha
        - git log --oneline
        - git log --online -3 podemos usar os parâmetros concatenados
    - podemos pesquisar por data
        - git log --before="2022-08-25" (antes de uma data)
        - git log --after="2022-08-24" (depois de uma data)
        - git log --before="2022-08-25" -1 também podemos concatenar parâmetros
        - git log --since="2 days ago"
    - podemos pesquisar por autor
        - git log --author="<author_name>"

alterar o estado do projeto para um ponto passado, via hash id
    - git log --oneline ( para facilitar - precisamos apenas dos 7 primeiros dígitos do hash id )
    - git checkout <7_números_iniciais_hash_id>
    - git checkout master ( voltar para o estado original, do qual saímos )

renomear um arquivo pelo git (mais prático)
    - git mv <nome_inicial_arquivo> <nome_final_arquivo>
    - a vantagem de fazer assim é que o arquivo pode ser "commitado" diretamente
    - caso façamos um rename diretamente no arquivo, devemos atualizar com git add

remover um arquivo pelo git
    -git rm <nome_arquivo>
    - remove o arquivo e já deixa o projeto pronto para ser "commitado"

a cada alteração importante devemos fazer um commit,pois facilita identificarmos erros ao longo 
do projeto em intervalos de tempo mais curtos e corremos menos risco de perdermos muito tempo 
de trabalho caso seja necessário voltarmos a um estado passado do projeto.

git diff --staged (muito utilizado)
    - mostra a diferença entre os estados atual e no último commit

git diff <hash_id>
    - mostra a diferença entre o estado atual e o estado ao qual se refere o hash id

git diff <hash_id_mais_antigo>..<hash_id_mais_novo>
    - mostra a diferença entre dois commits, a ordem é importante

corrigir/desfazer algumas ações pelo git
    - git commit --amend -m "<nova_mensagem>" corrige a mensagem
    - o amend serve também para adicionar alterações necessárias ao último commit
        - um arquivo que deveria ser criado;
        - modificação em um arquivo;

tirar arquivos de staged
    - git restore --staged <file_name>

retornar em modificações feitas de forma indesejada(em um arquivo)
    - git checkout <file_name>
    - volta ao estado do commit anterior

retornar em modificações feitas de forma indesejada(em vários arquivos)
    - git reset HEAD --hard
    - volta para o último commit
    - após um commit, podemos voltar para o commit anterior com 
        - git reset HEAD^ --hard